config_dir=$(dirname "$(readlink -f "$HOME/.shellrc")")

# Source a file if it exists.
function try_source {
	[ -f "$1" ] && source "$1"
}

try_source "$config_dir/git-prompt.sh"
try_source "$HOME/.aliases"

# Set a color in the terminal palette.
# \param 1 The index in the pallete.
# \param 2 is a hexadecimal RGB color code.
function set_color {
	if [ "$TERM" = "linux" ]; then
		[ $1 -lt 16 ] && printf $'\e]P%X%s' $1 $2
	else
		echo -en "\e]4;$1;#$2\a"
	fi
}


# Set up dircolors.
if [ -x /usr/bin/dircolors ]; then
    test -r ~/.dircolors && eval "$(dircolors -b ~/.dircolors)" || eval "$(dircolors -b)"
fi

# Enable viewing non-text files in less.
[ -x /usr/bin/lesspipe ] && eval "$(SHELL=/bin/sh lesspipe)"

# If there's a ~/bin, prepend it to the path
[ -x $HOME/bin ] && export PATH=$HOME/bin:$PATH

# Create a directory and change to it.
function mkd {
	if [ $# -gt 1 ]; then
		echo "Usage: $0 [dir]" >&2
		return 13
	fi
	if [ -z $1 ]; then
		mkd "/tmp/$(date +%F-%H-%M-%S)"
	else
		mkdir -p "$1"
		cd "$1"
	fi
}

# Get the directory name of a path.
# Behaves exactly like dirname with no options.
function dname { dirname $@ }

# Usage: has_ancestor PID NAME
# Check wether the process with PID has an ancestor with NAME.
function has_ancestor {
	local pid=$1
	local target=$2
	while [ $pid -ne 0 ]; do
		read -r ppid name < <(ps -o ppid= -o comm= -p "$pid")
		if [ "$name" = "$target" ]; then
			return 0
		fi
		pid=$ppid
	done
	return 1
}

if has_ancestor $$ sshd; then
	export HAS_SSHD_ANCESTOR=1
fi

# Set up git PS1 configuration.
GIT_PS1_SHOWDIRTYSTATE=1
GIT_PS1_SHOWSTASHSTATE=1
GIT_PS1_SHOWUNTRACKEDFILES=1
GIT_PS1_SHOWUPSTREAM="auto verbose"

export EDITOR=vim
export PAGER=less

# Always English everywhere
export LC_ALL=en_US.UTF-8

export NINJA_STATUS='%u %r %f %e -- '
export PYTHONPATH="${HOME}/system-local/python"

try_source "$HOME/.shellrc.local"

# vi: ft=sh
